{"ast":null,"code":"import _objectSpread from\"/private/tmp/workspace/daily-taro-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import Header from'./components/Header/Header';import TarotSection from'./components/TarotSection/TarotSection';import History from'./components/History/History';import Footer from'./components/Footer/Footer';import{getRandomCard}from'./data/tarotCards';import{useTarotHistory}from'./hooks/useTarotHistory';import{useLocalStorage}from'./hooks/useLocalStorage';import{vibrateEffect}from'./utils/animationUtils';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[currentCard,setCurrentCard]=useState(null);const[isCardDrawn,setIsCardDrawn]=useState(false);const[isDrawing,setIsDrawing]=useState(false);const[appSettings,setAppSettings]=useLocalStorage('tarotAppSettings',{soundEnabled:true,vibrateEnabled:true,animationsEnabled:true});// 커스텀 훅으로 히스토리 관리\nconst{history,addCardToHistory,clearHistory,getTodaysCard,hasDrawnToday,getStats}=useTarotHistory();// 앱 초기화 시 오늘의 카드 확인\nuseEffect(()=>{const todaysCard=getTodaysCard();if(todaysCard){setCurrentCard(todaysCard);setIsCardDrawn(true);}},[getTodaysCard]);// 카드 뽑기 애니메이션 및 로직\nconst drawCard=useCallback(async()=>{if(isDrawing)return;setIsDrawing(true);// 진동 효과 (모바일)\nif(appSettings.vibrateEnabled){vibrateEffect([50,100,50]);}try{// 애니메이션 지연\nawait new Promise(resolve=>setTimeout(resolve,1000));const newCard=getRandomCard();setCurrentCard(newCard);setIsCardDrawn(true);// 히스토리에 추가\naddCardToHistory(newCard);// 카드 뽑기 완료 진동\nif(appSettings.vibrateEnabled){setTimeout(()=>vibrateEffect(200),500);}}catch(error){console.error('카드 뽑기 오류:',error);}finally{setIsDrawing(false);}},[isDrawing,appSettings.vibrateEnabled,addCardToHistory]);// 리셋 기능\nconst resetCard=useCallback(()=>{setCurrentCard(null);setIsCardDrawn(false);setIsDrawing(false);},[]);// 새로운 카드 뽑기 (하루 제한 무시)\nconst drawNewCard=useCallback(async()=>{if(hasDrawnToday()){const confirmDraw=window.confirm('오늘 이미 카드를 뽑으셨습니다.\\n'+'새로운 카드를 뽑으시겠습니까?\\n'+'(일일 운세의 정확성을 위해 하루에 한 번만 뽑는 것을 권장합니다)');if(!confirmDraw)return;}await drawCard();},[hasDrawnToday,drawCard]);// 히스토리 클리어 확인\nconst handleClearHistory=useCallback(()=>{const confirmClear=window.confirm('모든 카드 히스토리를 삭제하시겠습니까?\\n'+'이 작업은 되돌릴 수 없습니다.');if(confirmClear){clearHistory();// 현재 카드도 리셋할지 확인\nconst resetCurrent=window.confirm('현재 카드도 리셋하시겠습니까?');if(resetCurrent){resetCard();}}},[clearHistory,resetCard]);// 설정 변경 핸들러\nconst updateSettings=useCallback(newSettings=>{setAppSettings(prev=>_objectSpread(_objectSpread({},prev),newSettings));},[setAppSettings]);// 키보드 단축키\nuseEffect(()=>{const handleKeyPress=event=>{// Escape: 리셋\nif(event.key==='Escape'){resetCard();}// Space: 카드 뽑기/새 카드\nelse if(event.key===' '&&!isDrawing){event.preventDefault();if(isCardDrawn){drawNewCard();}else{drawCard();}}};window.addEventListener('keydown',handleKeyPress);return()=>window.removeEventListener('keydown',handleKeyPress);},[isCardDrawn,isDrawing,drawCard,drawNewCard,resetCard]);// 앱 상태 객체\nconst appState={currentCard,isCardDrawn,isDrawing,hasDrawnToday:hasDrawnToday(),stats:getStats(),settings:appSettings};// 액션 객체\nconst actions={drawCard:isCardDrawn?drawNewCard:drawCard,resetCard,clearHistory:handleClearHistory,updateSettings};return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"main\",{className:\"main-content\",children:[/*#__PURE__*/_jsx(TarotSection,_objectSpread(_objectSpread({},appState),actions)),/*#__PURE__*/_jsx(History,{history:history,stats:appState.stats,onClearHistory:actions.clearHistory})]}),/*#__PURE__*/_jsx(Footer,{})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","Header","TarotSection","History","Footer","getRandomCard","useTarotHistory","useLocalStorage","vibrateEffect","jsx","_jsx","jsxs","_jsxs","App","currentCard","setCurrentCard","isCardDrawn","setIsCardDrawn","isDrawing","setIsDrawing","appSettings","setAppSettings","soundEnabled","vibrateEnabled","animationsEnabled","history","addCardToHistory","clearHistory","getTodaysCard","hasDrawnToday","getStats","todaysCard","drawCard","Promise","resolve","setTimeout","newCard","error","console","resetCard","drawNewCard","confirmDraw","window","confirm","handleClearHistory","confirmClear","resetCurrent","updateSettings","newSettings","prev","_objectSpread","handleKeyPress","event","key","preventDefault","addEventListener","removeEventListener","appState","stats","settings","actions","className","children","onClearHistory"],"sources":["/private/tmp/workspace/daily-taro-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport Header from './components/Header/Header';\nimport TarotSection from './components/TarotSection/TarotSection';\nimport History from './components/History/History';\nimport Footer from './components/Footer/Footer';\nimport { getRandomCard } from './data/tarotCards';\nimport { useTarotHistory } from './hooks/useTarotHistory';\nimport { useLocalStorage } from './hooks/useLocalStorage';\nimport { vibrateEffect } from './utils/animationUtils';\nimport './App.css';\n\nfunction App() {\n  const [currentCard, setCurrentCard] = useState(null);\n  const [isCardDrawn, setIsCardDrawn] = useState(false);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [appSettings, setAppSettings] = useLocalStorage('tarotAppSettings', {\n    soundEnabled: true,\n    vibrateEnabled: true,\n    animationsEnabled: true\n  });\n\n  // 커스텀 훅으로 히스토리 관리\n  const {\n    history,\n    addCardToHistory,\n    clearHistory,\n    getTodaysCard,\n    hasDrawnToday,\n    getStats\n  } = useTarotHistory();\n\n  // 앱 초기화 시 오늘의 카드 확인\n  useEffect(() => {\n    const todaysCard = getTodaysCard();\n    if (todaysCard) {\n      setCurrentCard(todaysCard);\n      setIsCardDrawn(true);\n    }\n  }, [getTodaysCard]);\n\n  // 카드 뽑기 애니메이션 및 로직\n  const drawCard = useCallback(async () => {\n    if (isDrawing) return;\n\n    setIsDrawing(true);\n\n    // 진동 효과 (모바일)\n    if (appSettings.vibrateEnabled) {\n      vibrateEffect([50, 100, 50]);\n    }\n\n    try {\n      // 애니메이션 지연\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      const newCard = getRandomCard();\n      setCurrentCard(newCard);\n      setIsCardDrawn(true);\n\n      // 히스토리에 추가\n      addCardToHistory(newCard);\n\n      // 카드 뽑기 완료 진동\n      if (appSettings.vibrateEnabled) {\n        setTimeout(() => vibrateEffect(200), 500);\n      }\n\n    } catch (error) {\n      console.error('카드 뽑기 오류:', error);\n    } finally {\n      setIsDrawing(false);\n    }\n  }, [isDrawing, appSettings.vibrateEnabled, addCardToHistory]);\n\n  // 리셋 기능\n  const resetCard = useCallback(() => {\n    setCurrentCard(null);\n    setIsCardDrawn(false);\n    setIsDrawing(false);\n  }, []);\n\n  // 새로운 카드 뽑기 (하루 제한 무시)\n  const drawNewCard = useCallback(async () => {\n    if (hasDrawnToday()) {\n      const confirmDraw = window.confirm(\n        '오늘 이미 카드를 뽑으셨습니다.\\n' +\n        '새로운 카드를 뽑으시겠습니까?\\n' +\n        '(일일 운세의 정확성을 위해 하루에 한 번만 뽑는 것을 권장합니다)'\n      );\n\n      if (!confirmDraw) return;\n    }\n\n    await drawCard();\n  }, [hasDrawnToday, drawCard]);\n\n  // 히스토리 클리어 확인\n  const handleClearHistory = useCallback(() => {\n    const confirmClear = window.confirm(\n      '모든 카드 히스토리를 삭제하시겠습니까?\\n' +\n      '이 작업은 되돌릴 수 없습니다.'\n    );\n\n    if (confirmClear) {\n      clearHistory();\n      // 현재 카드도 리셋할지 확인\n      const resetCurrent = window.confirm('현재 카드도 리셋하시겠습니까?');\n      if (resetCurrent) {\n        resetCard();\n      }\n    }\n  }, [clearHistory, resetCard]);\n\n  // 설정 변경 핸들러\n  const updateSettings = useCallback((newSettings) => {\n    setAppSettings(prev => ({ ...prev, ...newSettings }));\n  }, [setAppSettings]);\n\n  // 키보드 단축키\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      // Escape: 리셋\n      if (event.key === 'Escape') {\n        resetCard();\n      }\n      // Space: 카드 뽑기/새 카드\n      else if (event.key === ' ' && !isDrawing) {\n        event.preventDefault();\n        if (isCardDrawn) {\n          drawNewCard();\n        } else {\n          drawCard();\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => window.removeEventListener('keydown', handleKeyPress);\n  }, [isCardDrawn, isDrawing, drawCard, drawNewCard, resetCard]);\n\n  // 앱 상태 객체\n  const appState = {\n    currentCard,\n    isCardDrawn,\n    isDrawing,\n    hasDrawnToday: hasDrawnToday(),\n    stats: getStats(),\n    settings: appSettings\n  };\n\n  // 액션 객체\n  const actions = {\n    drawCard: isCardDrawn ? drawNewCard : drawCard,\n    resetCard,\n    clearHistory: handleClearHistory,\n    updateSettings\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n\n      <main className=\"main-content\">\n        <TarotSection\n          {...appState}\n          {...actions}\n        />\n\n        <History\n          history={history}\n          stats={appState.stats}\n          onClearHistory={actions.clearHistory}\n        />\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}