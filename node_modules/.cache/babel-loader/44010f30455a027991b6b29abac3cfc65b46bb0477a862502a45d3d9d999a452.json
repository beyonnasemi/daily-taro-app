{"ast":null,"code":"import{useState,useEffect,useCallback}from'react';const STORAGE_KEY='tarotHistory';const MAX_HISTORY_SIZE=10;export const useTarotHistory=()=>{const[history,setHistory]=useState([]);// 히스토리 로드\nuseEffect(()=>{try{const savedHistory=localStorage.getItem(STORAGE_KEY);if(savedHistory){const parsedHistory=JSON.parse(savedHistory);setHistory(parsedHistory);}}catch(error){console.error('히스토리 로드 실패:',error);setHistory([]);}},[]);// 히스토리 저장\nconst saveHistory=useCallback(newHistory=>{try{localStorage.setItem(STORAGE_KEY,JSON.stringify(newHistory));}catch(error){console.error('히스토리 저장 실패:',error);}},[]);// 카드 추가\nconst addCardToHistory=useCallback(card=>{setHistory(prevHistory=>{const newHistory=[card,...prevHistory].slice(0,MAX_HISTORY_SIZE);saveHistory(newHistory);return newHistory;});},[saveHistory]);// 히스토리 클리어\nconst clearHistory=useCallback(()=>{setHistory([]);try{localStorage.removeItem(STORAGE_KEY);}catch(error){console.error('히스토리 삭제 실패:',error);}},[]);// 오늘 뽑은 카드 확인\nconst getTodaysCard=useCallback(()=>{if(history.length===0)return null;const today=new Date().toDateString();const lastCard=history[0];const lastCardDate=new Date(lastCard.timestamp).toDateString();return today===lastCardDate?lastCard:null;},[history]);// 오늘 이미 뽑았는지 확인\nconst hasDrawnToday=useCallback(()=>{return getTodaysCard()!==null;},[getTodaysCard]);// 통계 정보\nconst getStats=useCallback(()=>{const totalCards=history.length;const majorArcana=history.filter(card=>card.type==='major').length;const minorArcana=history.filter(card=>card.type==='minor').length;const reversedCards=history.filter(card=>card.isReversed).length;return{total:totalCards,majorArcana,minorArcana,reversedCards,reversedPercentage:totalCards>0?(reversedCards/totalCards*100).toFixed(1):0};},[history]);return{history,addCardToHistory,clearHistory,getTodaysCard,hasDrawnToday,getStats};};","map":{"version":3,"names":["useState","useEffect","useCallback","STORAGE_KEY","MAX_HISTORY_SIZE","useTarotHistory","history","setHistory","savedHistory","localStorage","getItem","parsedHistory","JSON","parse","error","console","saveHistory","newHistory","setItem","stringify","addCardToHistory","card","prevHistory","slice","clearHistory","removeItem","getTodaysCard","length","today","Date","toDateString","lastCard","lastCardDate","timestamp","hasDrawnToday","getStats","totalCards","majorArcana","filter","type","minorArcana","reversedCards","isReversed","total","reversedPercentage","toFixed"],"sources":["/private/tmp/workspace/daily-taro-app/src/hooks/useTarotHistory.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nconst STORAGE_KEY = 'tarotHistory';\nconst MAX_HISTORY_SIZE = 10;\n\nexport const useTarotHistory = () => {\n  const [history, setHistory] = useState([]);\n\n  // 히스토리 로드\n  useEffect(() => {\n    try {\n      const savedHistory = localStorage.getItem(STORAGE_KEY);\n      if (savedHistory) {\n        const parsedHistory = JSON.parse(savedHistory);\n        setHistory(parsedHistory);\n      }\n    } catch (error) {\n      console.error('히스토리 로드 실패:', error);\n      setHistory([]);\n    }\n  }, []);\n\n  // 히스토리 저장\n  const saveHistory = useCallback((newHistory) => {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(newHistory));\n    } catch (error) {\n      console.error('히스토리 저장 실패:', error);\n    }\n  }, []);\n\n  // 카드 추가\n  const addCardToHistory = useCallback((card) => {\n    setHistory(prevHistory => {\n      const newHistory = [card, ...prevHistory].slice(0, MAX_HISTORY_SIZE);\n      saveHistory(newHistory);\n      return newHistory;\n    });\n  }, [saveHistory]);\n\n  // 히스토리 클리어\n  const clearHistory = useCallback(() => {\n    setHistory([]);\n    try {\n      localStorage.removeItem(STORAGE_KEY);\n    } catch (error) {\n      console.error('히스토리 삭제 실패:', error);\n    }\n  }, []);\n\n  // 오늘 뽑은 카드 확인\n  const getTodaysCard = useCallback(() => {\n    if (history.length === 0) return null;\n\n    const today = new Date().toDateString();\n    const lastCard = history[0];\n    const lastCardDate = new Date(lastCard.timestamp).toDateString();\n\n    return today === lastCardDate ? lastCard : null;\n  }, [history]);\n\n  // 오늘 이미 뽑았는지 확인\n  const hasDrawnToday = useCallback(() => {\n    return getTodaysCard() !== null;\n  }, [getTodaysCard]);\n\n  // 통계 정보\n  const getStats = useCallback(() => {\n    const totalCards = history.length;\n    const majorArcana = history.filter(card => card.type === 'major').length;\n    const minorArcana = history.filter(card => card.type === 'minor').length;\n    const reversedCards = history.filter(card => card.isReversed).length;\n\n    return {\n      total: totalCards,\n      majorArcana,\n      minorArcana,\n      reversedCards,\n      reversedPercentage: totalCards > 0 ? ((reversedCards / totalCards) * 100).toFixed(1) : 0\n    };\n  }, [history]);\n\n  return {\n    history,\n    addCardToHistory,\n    clearHistory,\n    getTodaysCard,\n    hasDrawnToday,\n    getStats\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}